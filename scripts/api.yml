openapi: 3.0.0
info:
  title: 'Pretendent backend'
  version: '0.1.3'

servers:
  - url: /api/v1

tags:
  - name: user
    description: User create
  - name: answer
    description: Answers from the user
  - name: results
    description: Results users with their answers
  - name: questions
    description: List questions
    


paths:
  # user creation section
  /user:
    post:
      description: Create user
      operationId: usersCreate
      tags: ['user']
      requestBody:
        required: true
        description: new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          $ref: '#/components/responses/UserResponse'
        '400':
          $ref: '#/components/responses/ErrorBadRequest'
        '409':
          $ref: '#/components/responses/ErrorConflict'
        '429':
          $ref: '#/components/responses/ErrorRateLimit'     
        '500':
          $ref: '#/components/responses/ErrorUnexpected'

  
  # responses received from users
  /answer:
    post:
      description: Add new answers
      operationId: addNewAnswers
      tags: ['answer']
      requestBody:
        required: true
        description: add new answers
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Answers'
      responses:
        '200':
          $ref: '#/components/responses/SuccessfulRecord'
        '400':
          $ref: '#/components/responses/ErrorBadRequest'
        '403':
          $ref: '#/components/responses/ErrorForbidden'          
        '429':
          $ref: '#/components/responses/ErrorRateLimit'          
        '500':
          $ref: '#/components/responses/ErrorUnexpected'

  # Results information page
  /results:
    get:
      description: Results users with their answers
      operationId: results
      tags: ['results']
      parameters:
        - $ref: "#/components/parameters/PaginationOffset"
        - $ref: "#/components/parameters/PaginationLimit"
      responses:
        '200':
          $ref: '#/components/responses/ResultsResponse'
        '400':
          $ref: '#/components/responses/ErrorBadRequest'
        '403':
          $ref: '#/components/responses/ErrorForbidden'          
        '429':
          $ref: '#/components/responses/ErrorRateLimit'          
        '500':
          $ref: '#/components/responses/ErrorUnexpected'

  /questions:
    get:
      description: List Questions
      operationId: questions
      tags: ['questions']
      responses:
        '200':
          $ref: '#/components/responses/QuestionsResponse'
        '400':
          $ref: '#/components/responses/ErrorBadRequest'
        '403':
          $ref: '#/components/responses/ErrorForbidden'          
        '429':
          $ref: '#/components/responses/ErrorRateLimit'          
        '500':
          $ref: '#/components/responses/ErrorUnexpected'

  /questions/correct:
    get:
      description: List correct Answers
      operationId: correct
      tags: ['questions']
      responses:
        '200':
          $ref: '#/components/responses/CorrectAnswersResponse'
        '400':
          $ref: '#/components/responses/ErrorBadRequest'
        '403':
          $ref: '#/components/responses/ErrorForbidden'          
        '429':
          $ref: '#/components/responses/ErrorRateLimit'          
        '500':
          $ref: '#/components/responses/ErrorUnexpected'          

components:
  schemas:
    ErrorCode:
      type: integer
      description: |
        - 1 - unknown error, read message
        - 2 - entity not found
        - 3 - database error
        - 4 - bad request params
        - 5 - bad page request params
        - 6 - bad request body

    Message:
      type: object
      description: Common server message object
      required:
        - errorCode
        - message
      properties:
        errorCode:
          $ref: '#/components/schemas/ErrorCode'
        message:
          description: Server message
          type: string

    User:
      type: object
      description: User information
      required:
        - name
        - lastName
        - email
      properties:
        name:     
          type: string
          description: User name
        lastName:
          type: string
          description: User last name
        email:
          type: string
          description: User email  
        telegram:
          type: string
          description: User telegram
        timeCreate:
          type: string
          format: date-time
          description: User creation time 
          readOnly: true
        userGUID:
          type: string
          format: uuid
          description: User uuid
          readOnly: true

    Results:
      description: Results list
      required:
        - users
        - count
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserResult'
        count:
          type: integer 
          description: Total count of users
          readOnly: true

    UserResult:
      type: object
      properties:
          user:
            $ref: '#/components/schemas/User'
            readOnly: true  
          percent:
            type: integer 
            description: Percentage of correct answers
            readOnly: true   
          answers:
            type: array
            items:
              $ref: '#/components/schemas/Answer'

    QuestionsItems:
      description: List of questions
      properties:
        Questions:
          type: array
          items:
            $ref: '#/components/schemas/Questions'         

    Questions:
      type: object
      description: list of questions with answers
      required:
      - id
      - code
      - question
      - answers
      properties:
        order_number:     
          type: integer
          description: Question number
        code:     
          type: string
          description: Code question       
        question:
          type: string
          description: Question 
        answers:
          description: Answer options    
          type: array
          items:
            type: string

    CorrectAnswers:
      description: list of correct answers
      required:
      - CorrectAnswers
      properties:
        CorrectAnswers:
          type: array
          items:
            $ref: '#/components/schemas/CorrectAnswer'  

    CorrectAnswer:
      type: object
      description: The object describes the user response
      required:
      - id
      - answers
      properties:
        id:     
          type: integer
          description: Question number
        answers:
          type: array
          items:
            type: integer
            description: Answer to the question on this number    



    Answers:
      type: object
      description: User GUID and all responses received
      required:
        - userGUID
        - answers
      properties:
        userGUID:
          type: string
          format: uuid
          description: GUID
        answers:
          type: array
          items:
            $ref: '#/components/schemas/Answer'

    Answer:
      type: object
      description: The object describes the user response
      required:
        - question
        - answer
      properties:
        question:     
          type: integer
          description: Question number
        answer:
          type: integer
          description: Answer to the question on this number

  # responses
  responses:
  
    SuccessfulRecord:
      description: Successful record
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'

    # user responses
    UserResponse:
      description: Created user info
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'

    # Results responses
    ResultsResponse:
      description: Results
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Results'

    # Questions responses
    QuestionsResponse:
      description: Questions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/QuestionsItems'

    # Correct answers 
    CorrectAnswersResponse:
      description: Correct Answers
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CorrectAnswers'

    # error responses            
    ErrorUnexpected:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'
    ErrorConflict:
      description: Email is busy
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'
    ErrorBadRequest:
      description: Error in request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'
    ErrorNotFound:
      description: Requested object not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'
    ErrorForbidden:
      description: Access denied for this user
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'
    ErrorRateLimit:
      description: Too Many Requests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'
  
  parameters:
    PaginationLimit:
      name: limit
      in: query
      description: maximum number of results to return
      required: false
      schema:
        type: integer
        format: int64

    PaginationOffset:
      name: offset
      in: query
      description: offset for pagination
      required: false
      schema:
        type: integer
        format: int64            