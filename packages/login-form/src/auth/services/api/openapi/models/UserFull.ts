/* tslint:disable */
/* eslint-disable */
/**
 * okauth
 * For authorization this spec uses scopes:   - admin. Read/write access to everything. Requires valid access_token and secure_okauth_admin=true KV   - self. Access permissions are method specific. Requires valid access_token  Other scopes are method specific
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Group,
    GroupFromJSON,
    GroupFromJSONTyped,
    GroupToJSON,
    KV,
    KVFromJSON,
    KVFromJSONTyped,
    KVToJSON,
} from './';

/**
 *
 * @export
 * @interface UserFull
 */
export interface UserFull {
    /**
     * domain name the user is part of
     * @type {string}
     * @memberof UserFull
     */
    domain?: string;
    /**
     *
     * @type {string}
     * @memberof UserFull
     */
    login?: string;
    /**
     * human friendly name
     * @type {string}
     * @memberof UserFull
     */
    displayName?: string;
    /**
     *
     * @type {boolean}
     * @memberof UserFull
     */
    blocked?: boolean;
    /**
     * groups user is part of
     * @type {Array<Group>}
     * @memberof UserFull
     */
    groups?: Array<Group>;
    /**
     * key:value pairs from user and its groups
     * @type {Array<KV>}
     * @memberof UserFull
     */
    kv?: Array<KV>;
    /**
     *
     * @type {boolean}
     * @memberof UserFull
     */
    _protected?: boolean;
}

export function UserFullFromJSON(json: any): UserFull {
    return UserFullFromJSONTyped(json, false);
}

export function UserFullFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserFull {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {

        'domain': !exists(json, 'domain') ? undefined : json['domain'],
        'login': !exists(json, 'login') ? undefined : json['login'],
        'displayName': !exists(json, 'display_name') ? undefined : json['display_name'],
        'blocked': !exists(json, 'blocked') ? undefined : json['blocked'],
        'groups': !exists(json, 'groups') ? undefined : ((json['groups'] as Array<any>).map(GroupFromJSON)),
        'kv': !exists(json, 'kv') ? undefined : ((json['kv'] as Array<any>).map(KVFromJSON)),
        '_protected': !exists(json, 'protected') ? undefined : json['protected'],
    };
}

export function UserFullToJSON(value?: UserFull | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {

        'domain': value.domain,
        'login': value.login,
        'display_name': value.displayName,
        'blocked': value.blocked,
        'groups': value.groups === undefined ? undefined : ((value.groups as Array<any>).map(GroupToJSON)),
        'kv': value.kv === undefined ? undefined : ((value.kv as Array<any>).map(KVToJSON)),
        'protected': value._protected,
    };
}


