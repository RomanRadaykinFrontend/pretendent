/* tslint:disable */
/* eslint-disable */
/**
 * okauth
 * For authorization this spec uses scopes:   - admin. Read/write access to everything. Requires valid access_token and secure_okauth_admin=true KV   - self. Access permissions are method specific. Requires valid access_token  Other scopes are method specific
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 *
 * @export
 * @interface InlineObject2
 */
export interface InlineObject2 {
    /**
     * arbitrary string to track this authentication session
     * @type {string}
     * @memberof InlineObject2
     */
    state: string;
    /**
     * upon completion user will be redirected to this URL. Query params will contain the result.
     * On success they will have 'state' param that was passed and 'token' that can be exchanged
     * for access and refresh tokens with /auth/{domain} path. You can also use 'state' to make sure
     * that redirect is part of the same authentication session.
     * On failure they will have 'error' param containing JSON string with ErrorResponse object
     * explaining the error
     * @type {string}
     * @memberof InlineObject2
     */
    redirect: string;
}

export function InlineObject2FromJSON(json: any): InlineObject2 {
    return InlineObject2FromJSONTyped(json, false);
}

export function InlineObject2FromJSONTyped(json: any, ignoreDiscriminator: boolean): InlineObject2 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {

        'state': json['state'],
        'redirect': json['redirect'],
    };
}

export function InlineObject2ToJSON(value?: InlineObject2 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {

        'state': value.state,
        'redirect': value.redirect,
    };
}


