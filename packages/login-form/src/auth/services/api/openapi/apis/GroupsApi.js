/* tslint:disable */
/* eslint-disable */
/**
 * okauth
 * For authorization this spec uses scopes:   - admin. Read/write access to everything. Requires valid access_token and secure_okauth_admin=true KV   - self. Access permissions are method specific. Requires valid access_token  Other scopes are method specific
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { InlineObject6ToJSON, InlineObject7ToJSON, InlineObject8ToJSON, InlineObject9ToJSON, InlineResponse2002FromJSON, InlineResponse2004FromJSON, InlineResponse2005FromJSON, } from '../models';
/**
 *
 */
export class GroupsApi extends runtime.BaseAPI {
    /**
     * add user to local domain group.  Allowed scopes:   - admin
     */
    async groupsAddUserRaw(requestParameters) {
        if (requestParameters.ident === null || requestParameters.ident === undefined) {
            throw new runtime.RequiredError('ident', 'Required parameter requestParameters.ident was null or undefined when calling groupsAddUser.');
        }
        if (requestParameters.inlineObject8 === null || requestParameters.inlineObject8 === undefined) {
            throw new runtime.RequiredError('inlineObject8', 'Required parameter requestParameters.inlineObject8 was null or undefined when calling groupsAddUser.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            queryParameters["access_token"] = this.configuration.apiKey("access_token"); // AccessToken authentication
        }
        else if (localStorage.getItem("access_token")) {
            queryParameters["access_token"] = localStorage.getItem("access_token");
        }
        const response = await this.request({
            path: `/groups/_/{ident}/users`.replace(`{${"ident"}}`, encodeURIComponent(String(requestParameters.ident))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject8ToJSON(requestParameters.inlineObject8),
        });
        return new runtime.VoidApiResponse(response);
    }
    /**
     * add user to local domain group.  Allowed scopes:   - admin
     */
    async groupsAddUser(requestParameters) {
        await this.groupsAddUserRaw(requestParameters);
    }
    /**
     * create group in local domain.  Allowed scopes:   - admin
     */
    async groupsCreateRaw(requestParameters) {
        if (requestParameters.inlineObject6 === null || requestParameters.inlineObject6 === undefined) {
            throw new runtime.RequiredError('inlineObject6', 'Required parameter requestParameters.inlineObject6 was null or undefined when calling groupsCreate.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            queryParameters["access_token"] = this.configuration.apiKey("access_token"); // AccessToken authentication
        }
        else if (localStorage.getItem("access_token")) {
            queryParameters["access_token"] = localStorage.getItem("access_token");
        }
        const response = await this.request({
            path: `/groups/_`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject6ToJSON(requestParameters.inlineObject6),
        });
        return new runtime.VoidApiResponse(response);
    }
    /**
     * create group in local domain.  Allowed scopes:   - admin
     */
    async groupsCreate(requestParameters) {
        await this.groupsCreateRaw(requestParameters);
    }
    /**
     * delete group.  Allowed scopes:   - admin
     */
    async groupsDeleteRaw(requestParameters) {
        if (requestParameters.domain === null || requestParameters.domain === undefined) {
            throw new runtime.RequiredError('domain', 'Required parameter requestParameters.domain was null or undefined when calling groupsDelete.');
        }
        if (requestParameters.ident === null || requestParameters.ident === undefined) {
            throw new runtime.RequiredError('ident', 'Required parameter requestParameters.ident was null or undefined when calling groupsDelete.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.apiKey) {
            queryParameters["access_token"] = this.configuration.apiKey("access_token"); // AccessToken authentication
        }
        else if (localStorage.getItem("access_token")) {
            queryParameters["access_token"] = localStorage.getItem("access_token");
        }
        const response = await this.request({
            path: `/groups/{domain}/{ident}`.replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))).replace(`{${"ident"}}`, encodeURIComponent(String(requestParameters.ident))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.VoidApiResponse(response);
    }
    /**
     * delete group.  Allowed scopes:   - admin
     */
    async groupsDelete(requestParameters) {
        await this.groupsDeleteRaw(requestParameters);
    }
    /**
     * delete user from local domain group.  Allowed scopes:   - admin
     */
    async groupsDeleteUserRaw(requestParameters) {
        if (requestParameters.ident === null || requestParameters.ident === undefined) {
            throw new runtime.RequiredError('ident', 'Required parameter requestParameters.ident was null or undefined when calling groupsDeleteUser.');
        }
        if (requestParameters.inlineObject9 === null || requestParameters.inlineObject9 === undefined) {
            throw new runtime.RequiredError('inlineObject9', 'Required parameter requestParameters.inlineObject9 was null or undefined when calling groupsDeleteUser.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            queryParameters["access_token"] = this.configuration.apiKey("access_token"); // AccessToken authentication
        }
        else if (localStorage.getItem("access_token")) {
            queryParameters["access_token"] = localStorage.getItem("access_token");
        }
        const response = await this.request({
            path: `/groups/_/{ident}/users`.replace(`{${"ident"}}`, encodeURIComponent(String(requestParameters.ident))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject9ToJSON(requestParameters.inlineObject9),
        });
        return new runtime.VoidApiResponse(response);
    }
    /**
     * delete user from local domain group.  Allowed scopes:   - admin
     */
    async groupsDeleteUser(requestParameters) {
        await this.groupsDeleteUserRaw(requestParameters);
    }
    /**
     * get specific groups.  Allowed scopes:   - admin   - self. Only groups that the user is member of
     */
    async groupsGetRaw(requestParameters) {
        if (requestParameters.domain === null || requestParameters.domain === undefined) {
            throw new runtime.RequiredError('domain', 'Required parameter requestParameters.domain was null or undefined when calling groupsGet.');
        }
        if (requestParameters.ident === null || requestParameters.ident === undefined) {
            throw new runtime.RequiredError('ident', 'Required parameter requestParameters.ident was null or undefined when calling groupsGet.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.apiKey) {
            queryParameters["access_token"] = this.configuration.apiKey("access_token"); // AccessToken authentication
        }
        else if (localStorage.getItem("access_token")) {
            queryParameters["access_token"] = localStorage.getItem("access_token");
        }
        const response = await this.request({
            path: `/groups/{domain}/{ident}`.replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))).replace(`{${"ident"}}`, encodeURIComponent(String(requestParameters.ident))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2005FromJSON(jsonValue));
    }
    /**
     * get specific groups.  Allowed scopes:   - admin   - self. Only groups that the user is member of
     */
    async groupsGet(requestParameters) {
        const response = await this.groupsGetRaw(requestParameters);
        return await response.value();
    }
    /**
     * get groups.  Allowed scopes:   - admin
     */
    async groupsGetAllRaw(requestParameters) {
        if (requestParameters.domain === null || requestParameters.domain === undefined) {
            throw new runtime.RequiredError('domain', 'Required parameter requestParameters.domain was null or undefined when calling groupsGetAll.');
        }
        const queryParameters = {};
        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        const headerParameters = {};
        if (this.configuration && this.configuration.apiKey) {
            queryParameters["access_token"] = this.configuration.apiKey("access_token"); // AccessToken authentication
        }
        else if (localStorage.getItem("access_token")) {
            queryParameters["access_token"] = localStorage.getItem("access_token");
        }
        const response = await this.request({
            path: `/groups/{domain}`.replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2004FromJSON(jsonValue));
    }
    /**
     * get groups.  Allowed scopes:   - admin
     */
    async groupsGetAll(requestParameters) {
        const response = await this.groupsGetAllRaw(requestParameters);
        return await response.value();
    }
    /**
     * get all group users.  Allowed scopes:   - admin
     */
    async groupsGetUsersRaw(requestParameters) {
        if (requestParameters.domain === null || requestParameters.domain === undefined) {
            throw new runtime.RequiredError('domain', 'Required parameter requestParameters.domain was null or undefined when calling groupsGetUsers.');
        }
        if (requestParameters.ident === null || requestParameters.ident === undefined) {
            throw new runtime.RequiredError('ident', 'Required parameter requestParameters.ident was null or undefined when calling groupsGetUsers.');
        }
        const queryParameters = {};
        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.blocked !== undefined) {
            queryParameters['blocked'] = requestParameters.blocked;
        }
        const headerParameters = {};
        if (this.configuration && this.configuration.apiKey) {
            queryParameters["access_token"] = this.configuration.apiKey("access_token"); // AccessToken authentication
        }
        else if (localStorage.getItem("access_token")) {
            queryParameters["access_token"] = localStorage.getItem("access_token");
        }
        const response = await this.request({
            path: `/groups/{domain}/{ident}/users`.replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))).replace(`{${"ident"}}`, encodeURIComponent(String(requestParameters.ident))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2002FromJSON(jsonValue));
    }
    /**
     * get all group users.  Allowed scopes:   - admin
     */
    async groupsGetUsers(requestParameters) {
        const response = await this.groupsGetUsersRaw(requestParameters);
        return await response.value();
    }
    /**
     * change group in local domain.  Allowed scopes:   - admin
     */
    async groupsUpdateRaw(requestParameters) {
        if (requestParameters.ident === null || requestParameters.ident === undefined) {
            throw new runtime.RequiredError('ident', 'Required parameter requestParameters.ident was null or undefined when calling groupsUpdate.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            queryParameters["access_token"] = this.configuration.apiKey("access_token"); // AccessToken authentication
        }
        else if (localStorage.getItem("access_token")) {
            queryParameters["access_token"] = localStorage.getItem("access_token");
        }
        const response = await this.request({
            path: `/groups/_/{ident}`.replace(`{${"ident"}}`, encodeURIComponent(String(requestParameters.ident))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject7ToJSON(requestParameters.inlineObject7),
        });
        return new runtime.VoidApiResponse(response);
    }
    /**
     * change group in local domain.  Allowed scopes:   - admin
     */
    async groupsUpdate(requestParameters) {
        await this.groupsUpdateRaw(requestParameters);
    }
}
//# sourceMappingURL=GroupsApi.js.map