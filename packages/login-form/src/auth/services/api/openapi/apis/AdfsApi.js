/* tslint:disable */
/* eslint-disable */
/**
 * okauth
 * For authorization this spec uses scopes:   - admin. Read/write access to everything. Requires valid access_token and secure_okauth_admin=true KV   - self. Access permissions are method specific. Requires valid access_token  Other scopes are method specific
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { InlineObject2ToJSON, InlineObject3ToJSON, } from '../models';
/**
 *
 */
export class AdfsApi extends runtime.BaseAPI {
    /**
     * redirect user to this URL to both invalidate refresh token and logout from ADFS
     */
    async authDomainLogoutPostRaw(requestParameters) {
        if (requestParameters.domain === null || requestParameters.domain === undefined) {
            throw new runtime.RequiredError('domain', 'Required parameter requestParameters.domain was null or undefined when calling authDomainLogoutPost.');
        }
        if (requestParameters.inlineObject3 === null || requestParameters.inlineObject3 === undefined) {
            throw new runtime.RequiredError('inlineObject3', 'Required parameter requestParameters.inlineObject3 was null or undefined when calling authDomainLogoutPost.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/auth/{domain}/logout`.replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject3ToJSON(requestParameters.inlineObject3),
        });
        return new runtime.VoidApiResponse(response);
    }
    /**
     * redirect user to this URL to both invalidate refresh token and logout from ADFS
     */
    async authDomainLogoutPost(requestParameters) {
        await this.authDomainLogoutPostRaw(requestParameters);
    }
    /**
     * return metadata useful for registering this application in ADFS
     */
    async authDomainMetadataGetRaw(requestParameters) {
        if (requestParameters.domain === null || requestParameters.domain === undefined) {
            throw new runtime.RequiredError('domain', 'Required parameter requestParameters.domain was null or undefined when calling authDomainMetadataGet.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/auth/{domain}/metadata`.replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response);
    }
    /**
     * return metadata useful for registering this application in ADFS
     */
    async authDomainMetadataGet(requestParameters) {
        const response = await this.authDomainMetadataGetRaw(requestParameters);
        return await response.value();
    }
    /**
     * redirect user to this URL instead of displaying login form to initiate ADFS authentication
     */
    async authDomainSigninPostRaw(requestParameters) {
        if (requestParameters.domain === null || requestParameters.domain === undefined) {
            throw new runtime.RequiredError('domain', 'Required parameter requestParameters.domain was null or undefined when calling authDomainSigninPost.');
        }
        if (requestParameters.inlineObject2 === null || requestParameters.inlineObject2 === undefined) {
            throw new runtime.RequiredError('inlineObject2', 'Required parameter requestParameters.inlineObject2 was null or undefined when calling authDomainSigninPost.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/auth/{domain}/signin`.replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject2ToJSON(requestParameters.inlineObject2),
        });
        return new runtime.VoidApiResponse(response);
    }
    /**
     * redirect user to this URL instead of displaying login form to initiate ADFS authentication
     */
    async authDomainSigninPost(requestParameters) {
        await this.authDomainSigninPostRaw(requestParameters);
    }
}
//# sourceMappingURL=AdfsApi.js.map