/* tslint:disable */
/* eslint-disable */
/**
 * okauth
 * For authorization this spec uses scopes:   - admin. Read/write access to everything. Requires valid access_token and secure_okauth_admin=true KV   - self. Access permissions are method specific. Requires valid access_token  Other scopes are method specific 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    InlineObject2,
    InlineObject2FromJSON,
    InlineObject2ToJSON,
    InlineObject3,
    InlineObject3FromJSON,
    InlineObject3ToJSON,
} from '../models';

export interface AuthLogoutRequest {
    domain: string;
    inlineObject3: InlineObject3;
}

export interface AuthMetadataRequest {
    domain: string;
}

export interface AuthSigninRequest {
    domain: string;
    inlineObject2: InlineObject2;
}

/**
 * 
 */
export class AdfsApi extends runtime.BaseAPI {

    /**
     * redirect user to this URL to both invalidate refresh token and logout from ADFS
     */
    async authLogoutRaw(requestParameters: AuthLogoutRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.domain === null || requestParameters.domain === undefined) {
            throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling authLogout.');
        }

        if (requestParameters.inlineObject3 === null || requestParameters.inlineObject3 === undefined) {
            throw new runtime.RequiredError('inlineObject3','Required parameter requestParameters.inlineObject3 was null or undefined when calling authLogout.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{domain}/logout`.replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject3ToJSON(requestParameters.inlineObject3),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * redirect user to this URL to both invalidate refresh token and logout from ADFS
     */
    async authLogout(requestParameters: AuthLogoutRequest): Promise<void> {
        await this.authLogoutRaw(requestParameters);
    }

    /**
     * return metadata useful for registering this application in ADFS
     */
    async authMetadataRaw(requestParameters: AuthMetadataRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.domain === null || requestParameters.domain === undefined) {
            throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling authMetadata.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/{domain}/metadata`.replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * return metadata useful for registering this application in ADFS
     */
    async authMetadata(requestParameters: AuthMetadataRequest): Promise<object> {
        const response = await this.authMetadataRaw(requestParameters);
        return await response.value();
    }

    /**
     * redirect user to this URL instead of displaying login form to initiate ADFS authentication
     */
    async authSigninRaw(requestParameters: AuthSigninRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.domain === null || requestParameters.domain === undefined) {
            throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling authSignin.');
        }

        if (requestParameters.inlineObject2 === null || requestParameters.inlineObject2 === undefined) {
            throw new runtime.RequiredError('inlineObject2','Required parameter requestParameters.inlineObject2 was null or undefined when calling authSignin.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{domain}/signin`.replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject2ToJSON(requestParameters.inlineObject2),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * redirect user to this URL instead of displaying login form to initiate ADFS authentication
     */
    async authSignin(requestParameters: AuthSigninRequest): Promise<void> {
        await this.authSigninRaw(requestParameters);
    }

}
