/* tslint:disable */
/* eslint-disable */
/**
 * okauth
 * For authorization this spec uses scopes:   - admin. Read/write access to everything. Requires valid access_token and secure_okauth_admin=true KV   - self. Access permissions are method specific. Requires valid access_token  Other scopes are method specific 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    DomainType,
    DomainTypeFromJSON,
    DomainTypeToJSON,
    InlineObject,
    InlineObjectFromJSON,
    InlineObjectToJSON,
    InlineObject1,
    InlineObject1FromJSON,
    InlineObject1ToJSON,
    InlineResponse200,
    InlineResponse200FromJSON,
    InlineResponse200ToJSON,
    InlineResponse2001,
    InlineResponse2001FromJSON,
    InlineResponse2001ToJSON,
} from '../models';

export interface AuthInvalidateRequest {
    inlineObject1: InlineObject1;
}

export interface AuthRefreshRequest {
    inlineObject: InlineObject;
}

export interface AuthUserRequest {
    domain: string;
    domainType: DomainType;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * invalidate refresh token i.e. logout
     */
    async authInvalidateRaw(requestParameters: AuthInvalidateRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.inlineObject1 === null || requestParameters.inlineObject1 === undefined) {
            throw new runtime.RequiredError('inlineObject1','Required parameter requestParameters.inlineObject1 was null or undefined when calling authInvalidate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/invalidate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject1ToJSON(requestParameters.inlineObject1),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * invalidate refresh token i.e. logout
     */
    async authInvalidate(requestParameters: AuthInvalidateRequest): Promise<void> {
        await this.authInvalidateRaw(requestParameters);
    }

    /**
     * refresh tokens
     */
    async authRefreshRaw(requestParameters: AuthRefreshRequest): Promise<runtime.ApiResponse<InlineResponse2001>> {
        if (requestParameters.inlineObject === null || requestParameters.inlineObject === undefined) {
            throw new runtime.RequiredError('inlineObject','Required parameter requestParameters.inlineObject was null or undefined when calling authRefresh.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/refresh`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObjectToJSON(requestParameters.inlineObject),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2001FromJSON(jsonValue));
    }

    /**
     * refresh tokens
     */
    async authRefresh(requestParameters: AuthRefreshRequest): Promise<InlineResponse2001> {
        const response = await this.authRefreshRaw(requestParameters);
        return await response.value();
    }

    /**
     * request new token
     */
    async authUserRaw(requestParameters: AuthUserRequest): Promise<runtime.ApiResponse<InlineResponse200>> {
        if (requestParameters.domain === null || requestParameters.domain === undefined) {
            throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling authUser.');
        }

        if (requestParameters.domainType === null || requestParameters.domainType === undefined) {
            throw new runtime.RequiredError('domainType','Required parameter requestParameters.domainType was null or undefined when calling authUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/{domain}`.replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DomainTypeToJSON(requestParameters.domainType),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * request new token
     */
    async authUser(requestParameters: AuthUserRequest): Promise<InlineResponse200> {
        const response = await this.authUserRaw(requestParameters);
        return await response.value();
    }

}
