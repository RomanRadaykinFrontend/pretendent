/* tslint:disable */
/* eslint-disable */
/**
 * okauth
 * For authorization this spec uses scopes:   - admin. Read/write access to everything. Requires valid access_token and secure_okauth_admin=true KV   - self. Access permissions are method specific. Requires valid access_token  Other scopes are method specific 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InlineObject10,
    InlineObject10FromJSON,
    InlineObject10ToJSON,
    InlineObject11,
    InlineObject11FromJSON,
    InlineObject11ToJSON,
    InlineResponse2006,
    InlineResponse2006FromJSON,
    InlineResponse2006ToJSON,
} from '../models';

export interface KvGroupDeleteRequest {
    domain: string;
    ident: string;
    key: string;
}

export interface KvGroupGetRequest {
    domain: string;
    ident: string;
    key: string;
}

export interface KvGroupSetRequest {
    domain: string;
    ident: string;
    inlineObject11: InlineObject11;
}

export interface KvUserDeleteRequest {
    domain: string;
    login: string;
    key: string;
}

export interface KvUserGetRequest {
    domain: string;
    login: string;
    key: string;
    groups?: boolean;
}

export interface KvUserSetRequest {
    domain: string;
    login: string;
    inlineObject10: InlineObject10;
}

/**
 * 
 */
export class KvApi extends runtime.BaseAPI {

    /**
     * removes specific key:value pair from a group.  Allowed scopes:   - admin 
     */
    async kvGroupDeleteRaw(requestParameters: KvGroupDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.domain === null || requestParameters.domain === undefined) {
            throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling kvGroupDelete.');
        }

        if (requestParameters.ident === null || requestParameters.ident === undefined) {
            throw new runtime.RequiredError('ident','Required parameter requestParameters.ident was null or undefined when calling kvGroupDelete.');
        }

        if (requestParameters.key === null || requestParameters.key === undefined) {
            throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling kvGroupDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["access_token"] = this.configuration.apiKey("access_token"); // AccessToken authentication
        }

        const response = await this.request({
            path: `/kv/{domain}/groups/{ident}/{key}`.replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))).replace(`{${"ident"}}`, encodeURIComponent(String(requestParameters.ident))).replace(`{${"key"}}`, encodeURIComponent(String(requestParameters.key))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * removes specific key:value pair from a group.  Allowed scopes:   - admin 
     */
    async kvGroupDelete(requestParameters: KvGroupDeleteRequest): Promise<void> {
        await this.kvGroupDeleteRaw(requestParameters);
    }

    /**
     * get specific key:value pair from a group.  Allowed scopes:   - admin   - self. Only groups that the user is member of. Secure keys are allowed 
     */
    async kvGroupGetRaw(requestParameters: KvGroupGetRequest): Promise<runtime.ApiResponse<InlineResponse2006>> {
        if (requestParameters.domain === null || requestParameters.domain === undefined) {
            throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling kvGroupGet.');
        }

        if (requestParameters.ident === null || requestParameters.ident === undefined) {
            throw new runtime.RequiredError('ident','Required parameter requestParameters.ident was null or undefined when calling kvGroupGet.');
        }

        if (requestParameters.key === null || requestParameters.key === undefined) {
            throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling kvGroupGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["access_token"] = this.configuration.apiKey("access_token"); // AccessToken authentication
        }

        const response = await this.request({
            path: `/kv/{domain}/groups/{ident}/{key}`.replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))).replace(`{${"ident"}}`, encodeURIComponent(String(requestParameters.ident))).replace(`{${"key"}}`, encodeURIComponent(String(requestParameters.key))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2006FromJSON(jsonValue));
    }

    /**
     * get specific key:value pair from a group.  Allowed scopes:   - admin   - self. Only groups that the user is member of. Secure keys are allowed 
     */
    async kvGroupGet(requestParameters: KvGroupGetRequest): Promise<InlineResponse2006> {
        const response = await this.kvGroupGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * add or update key:value pair for a group.  Allowed scopes:   - admin 
     */
    async kvGroupSetRaw(requestParameters: KvGroupSetRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.domain === null || requestParameters.domain === undefined) {
            throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling kvGroupSet.');
        }

        if (requestParameters.ident === null || requestParameters.ident === undefined) {
            throw new runtime.RequiredError('ident','Required parameter requestParameters.ident was null or undefined when calling kvGroupSet.');
        }

        if (requestParameters.inlineObject11 === null || requestParameters.inlineObject11 === undefined) {
            throw new runtime.RequiredError('inlineObject11','Required parameter requestParameters.inlineObject11 was null or undefined when calling kvGroupSet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["access_token"] = this.configuration.apiKey("access_token"); // AccessToken authentication
        }

        const response = await this.request({
            path: `/kv/{domain}/groups/{ident}`.replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))).replace(`{${"ident"}}`, encodeURIComponent(String(requestParameters.ident))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject11ToJSON(requestParameters.inlineObject11),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * add or update key:value pair for a group.  Allowed scopes:   - admin 
     */
    async kvGroupSet(requestParameters: KvGroupSetRequest): Promise<void> {
        await this.kvGroupSetRaw(requestParameters);
    }

    /**
     * removes specific key:value pair from a user.  Allowed scopes:   - admin   - self. Only personal KVs. Secure keys are forbidden. When deleting all keys will delete everything except secure ones 
     */
    async kvUserDeleteRaw(requestParameters: KvUserDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.domain === null || requestParameters.domain === undefined) {
            throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling kvUserDelete.');
        }

        if (requestParameters.login === null || requestParameters.login === undefined) {
            throw new runtime.RequiredError('login','Required parameter requestParameters.login was null or undefined when calling kvUserDelete.');
        }

        if (requestParameters.key === null || requestParameters.key === undefined) {
            throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling kvUserDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["access_token"] = this.configuration.apiKey("access_token"); // AccessToken authentication
        }

        const response = await this.request({
            path: `/kv/{domain}/users/{login}/{key}`.replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))).replace(`{${"login"}}`, encodeURIComponent(String(requestParameters.login))).replace(`{${"key"}}`, encodeURIComponent(String(requestParameters.key))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * removes specific key:value pair from a user.  Allowed scopes:   - admin   - self. Only personal KVs. Secure keys are forbidden. When deleting all keys will delete everything except secure ones 
     */
    async kvUserDelete(requestParameters: KvUserDeleteRequest): Promise<void> {
        await this.kvUserDeleteRaw(requestParameters);
    }

    /**
     * get specific key:value pair from a user.  Allowed scopes:   - admin   - self. Only personal keys. Secure keys are allowed 
     */
    async kvUserGetRaw(requestParameters: KvUserGetRequest): Promise<runtime.ApiResponse<InlineResponse2006>> {
        if (requestParameters.domain === null || requestParameters.domain === undefined) {
            throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling kvUserGet.');
        }

        if (requestParameters.login === null || requestParameters.login === undefined) {
            throw new runtime.RequiredError('login','Required parameter requestParameters.login was null or undefined when calling kvUserGet.');
        }

        if (requestParameters.key === null || requestParameters.key === undefined) {
            throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling kvUserGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.groups !== undefined) {
            queryParameters['groups'] = requestParameters.groups;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["access_token"] = this.configuration.apiKey("access_token"); // AccessToken authentication
        }

        const response = await this.request({
            path: `/kv/{domain}/users/{login}/{key}`.replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))).replace(`{${"login"}}`, encodeURIComponent(String(requestParameters.login))).replace(`{${"key"}}`, encodeURIComponent(String(requestParameters.key))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2006FromJSON(jsonValue));
    }

    /**
     * get specific key:value pair from a user.  Allowed scopes:   - admin   - self. Only personal keys. Secure keys are allowed 
     */
    async kvUserGet(requestParameters: KvUserGetRequest): Promise<InlineResponse2006> {
        const response = await this.kvUserGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * add or update key:value pair for a user.  Allowed scopes:   - admin   - self. Only personal KVs. Secure keys are forbidden 
     */
    async kvUserSetRaw(requestParameters: KvUserSetRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.domain === null || requestParameters.domain === undefined) {
            throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling kvUserSet.');
        }

        if (requestParameters.login === null || requestParameters.login === undefined) {
            throw new runtime.RequiredError('login','Required parameter requestParameters.login was null or undefined when calling kvUserSet.');
        }

        if (requestParameters.inlineObject10 === null || requestParameters.inlineObject10 === undefined) {
            throw new runtime.RequiredError('inlineObject10','Required parameter requestParameters.inlineObject10 was null or undefined when calling kvUserSet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["access_token"] = this.configuration.apiKey("access_token"); // AccessToken authentication
        }

        const response = await this.request({
            path: `/kv/{domain}/users/{login}`.replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))).replace(`{${"login"}}`, encodeURIComponent(String(requestParameters.login))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject10ToJSON(requestParameters.inlineObject10),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * add or update key:value pair for a user.  Allowed scopes:   - admin   - self. Only personal KVs. Secure keys are forbidden 
     */
    async kvUserSet(requestParameters: KvUserSetRequest): Promise<void> {
        await this.kvUserSetRaw(requestParameters);
    }

}
